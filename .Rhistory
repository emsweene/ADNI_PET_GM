446 353/918 561
446353/918561
881/2815
?pairs
?legend
pdf('mean_PET_GM.pdf')
use.colors <- c("blue", "red")
plot(mean.grey.matter.4, mean.pet.slopes.2.1), col = use.colors[baseline.subjects$MCI])
dev.off()
pdf('mean_PET_GM.pdf')
use.colors <- c("blue", "red")
plot(mean.grey.matter.4, mean.pet.slopes.2.1, col = use.colors[baseline.subjects$MCI])
dev.off()
fileDir <- '/dexter/disk1/smart/AD/ADNI/Greven_ADNI'
files <- dir(fileDir, pattern = "*.nii.gz", full.names = TRUE)
subject.ids <- unlist(lapply(files, function(x) tail(unlist(strsplit(x, '/')), n=1)))
subject.ids <- unique(unlist(lapply(subject.ids, function(x) substr(x, 1, 10))))
if(Sys.info()["user"] == "fabians"){
nplargehome <- "/home/fabians/wrkspc/tikhonov/trunk/pkg"
setwd(nplargehome)
library(devtools)
load_all("nplarge-db")
load_all("nplarge-la")
source("../sandbox/penalized/nplarge-regression-utils.R")
} else {
library("nplargedb")
library("nplargela")
source("nplarge-regression-utils.R")
}
library(dplyr)
make_image <- function(dims){
periods <- runif(length(dims), .5, 9)
dim_vecs <- lapply(dims, function(x) seq_len(x)/x)
waves <- mapply(function(dim_vec, period) {
runif(1, 1, 2) * sin(period*(dim_vec + rnorm(1, 0, .5)))
}, dim_vecs, periods, SIMPLIFY=FALSE)
Reduce(`%o%`, waves)
}
# example:
layout(matrix(1:9, 3,3)); replicate(9, image(make_image(c(20, 30))))
################################################################################
# simulate data from
#   y_i(v) = beta0 + z_i*beta_z(v) +  x_i(v)*beta_x(v) + e_iv
# where v is a multi-index over some ROI
################################################################################
set.seed(19450508L)
n <-  100
dim_roi <- c(20, 20, 10)
n_dims <- length(dim_roi)
dims <- lapply(dim_roi, function(x) seq_len(x))
names(dims) <- paste0("dim", 1:n_dims)
snr <- 10
data <- data.frame(subject=factor(1:n),
z = scale(rnorm(n)))
# centered images:
x_raw <- replicate(n, make_image(dim_roi))
x_mean <- apply(x_raw, 1:n_dims, sum)/n
x <- array(apply(x_raw, n_dims+1, function(x_slice) x_slice - x_mean),
dim=c(dim_roi, n)) ## stupid apply collapses first dims wtf...
x_cube <- tbl_cube(dimensions=append(dims, list(subject=1:n)),
measures = list(x=x))
beta_x <- make_image(dim_roi) + make_image(dim_roi)
if(n_dims == 1) {
plot(beta_x, type="l")
}
if(n_dims == 2) {
image(beta_x)
}
if(n_dims == 3) {
slices <- round(seq(1, dim_roi[3], l=9))
layout(t(matrix(1:9, 3, 3)))
for(slice in slices){
image(beta_x[,,slice], main=bquote("slice "~.(slice)))
}
}
# eta_x = x * beta
eta_x <-  x_cube$mets$x * array(beta_x, dim=c(dim_roi, n))
beta_z <- make_image(dim_roi) + make_image(dim_roi)
z_array <- aperm(array(data$z, dim=c(n, dim_roi)), c(2:(n_dims+1), 1))
eta_z <-  z_array * array(beta_z, dim=c(dim_roi, n))
var_eta <- var(as.vector(eta_x + eta_z))
sd_e <- sqrt(var_eta/snr)
beta0 <- .1
eta <- beta0 + eta_x + eta_z
y <- eta + array(rnorm(prod(dim_roi) * n, sd=sd_e), dim=c(dim_roi, n))
y_cube <- tbl_cube(dimensions=append(dims, list(subject=1:n)),
measures = list(y=y, eta=eta))
# check:
if(n_dims == 1) {
layout(t(1:4))
rng <- range(y_cube$mets$y)
matplot(y_cube$mets$y, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_x + eta_z, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_x, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_z, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
}
if(n_dims == 2) {
use_subject <- 5
layout(t(1:4))
clrs <- terrain.colors(24)
brks <- seq(min(y_cube$mets$y), max(y_cube$mets$y), l=25)
image(y_cube$mets$y[, , use_subject], col=clrs, breaks=brks)
image((eta_x + eta_z)[, , use_subject], col=clrs, breaks=brks)
image(eta_x[, , use_subject], col=clrs, breaks=brks)
image(eta_z[, , use_subject], col=clrs, breaks=brks)
}
if(n_dims == 3) {
use_subject <- 5
use_slice <- 2
layout(t(1:4))
clrs <- heat.colors(24)
brks <- seq(min(y_cube$mets$y), max(y_cube$mets$y), l=25)
image(y_cube$mets$y[, ,use_slice, use_subject], col=clrs, breaks=brks)
image((eta_x + eta_z)[, , use_slice, use_subject], col=clrs, breaks=brks)
image(eta_x[, , use_slice, use_subject], col=clrs, breaks=brks)
image(eta_z[, , use_slice, use_subject], col=clrs, breaks=brks)
}
# import data
denv <- dataenv(data, features="z", dims="subject")
add_features(data=x_cube, dataenv=denv)
add_dims(data=x_cube, dataenv=denv)
const_subj <- const(n, denv)
#const_dims <- lapply(dim_roi, function(dim) const(dim, denv))
#const_v <- do.call(kron, const_dims)
# slightly more efficent than the above:
const_v <- const(prod(dim_roi), denv)
bs_dims <- lapply(paste0("dim", 1:n_dims),
function(dim) bspline(dim, denv, df=6, constraint="none"))
bs_v <- do.call(kron, bs_dims)
intercept <- kron(const_v, const_subj)
bs_z <- kron(bs_v, const(n, denv, by=data$z))
bs_x <- kron(bs_v, const_subj, by=as.vector(x_cube$mets$x))
dim(as.vector(x_cube$mets$x))
length(as.vector(x_cube$mets$x))
resp
resp <- as.vector(y_cube$mets$y)
length(resp)
n <-  94
dim_roi <- c(7, 7, 7)
n_dims <- length(dim_roi)
dims <- lapply(dim_roi, function(x) seq_len(x))
names(dims) <- paste0("dim", 1:n_dims)
snr <- 10
data <- data.frame(subject=factor(1:n),
z = scale(rnorm(n)))
# centered images:
x_raw <- replicate(n, make_image(dim_roi))
x_mean <- apply(x_raw, 1:n_dims, sum)/n
x <- array(apply(x_raw, n_dims+1, function(x_slice) x_slice - x_mean),
dim=c(dim_roi, n)) ## stupid apply collapses first dims wtf...
x_cube <- tbl_cube(dimensions=append(dims, list(subject=1:n)),
measures = list(x=x))
beta_x <- make_image(dim_roi) + make_image(dim_roi)
if(n_dims == 1) {
plot(beta_x, type="l")
}
if(n_dims == 2) {
image(beta_x)
}
if(n_dims == 3) {
slices <- round(seq(1, dim_roi[3], l=9))
layout(t(matrix(1:9, 3, 3)))
for(slice in slices){
image(beta_x[,,slice], main=bquote("slice "~.(slice)))
}
}
# eta_x = x * beta
eta_x <-  x_cube$mets$x * array(beta_x, dim=c(dim_roi, n))
beta_z <- make_image(dim_roi) + make_image(dim_roi)
z_array <- aperm(array(data$z, dim=c(n, dim_roi)), c(2:(n_dims+1), 1))
eta_z <-  z_array * array(beta_z, dim=c(dim_roi, n))
var_eta <- var(as.vector(eta_x + eta_z))
sd_e <- sqrt(var_eta/snr)
beta0 <- .1
eta <- beta0 + eta_x + eta_z
y <- eta + array(rnorm(prod(dim_roi) * n, sd=sd_e), dim=c(dim_roi, n))
y_cube <- tbl_cube(dimensions=append(dims, list(subject=1:n)),
measures = list(y=y, eta=eta))
# check:
if(n_dims == 1) {
layout(t(1:4))
rng <- range(y_cube$mets$y)
matplot(y_cube$mets$y, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_x + eta_z, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_x, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
matplot(eta_z, lty=1, type="l", col=rgb(0,0,0, .1), ylim=rng)
}
if(n_dims == 2) {
use_subject <- 5
layout(t(1:4))
clrs <- terrain.colors(24)
brks <- seq(min(y_cube$mets$y), max(y_cube$mets$y), l=25)
image(y_cube$mets$y[, , use_subject], col=clrs, breaks=brks)
image((eta_x + eta_z)[, , use_subject], col=clrs, breaks=brks)
image(eta_x[, , use_subject], col=clrs, breaks=brks)
image(eta_z[, , use_subject], col=clrs, breaks=brks)
}
if(n_dims == 3) {
use_subject <- 5
use_slice <- 2
layout(t(1:4))
clrs <- heat.colors(24)
brks <- seq(min(y_cube$mets$y), max(y_cube$mets$y), l=25)
image(y_cube$mets$y[, ,use_slice, use_subject], col=clrs, breaks=brks)
image((eta_x + eta_z)[, , use_slice, use_subject], col=clrs, breaks=brks)
image(eta_x[, , use_slice, use_subject], col=clrs, breaks=brks)
image(eta_z[, , use_slice, use_subject], col=clrs, breaks=brks)
}
################################################################################
# import data, set up modelterms:
################################################################################
# import data
denv <- dataenv(data, features="z", dims="subject")
add_features(data=x_cube, dataenv=denv)
add_dims(data=x_cube, dataenv=denv)
# set up terms & pred
const_subj <- const(n, denv)
#const_dims <- lapply(dim_roi, function(dim) const(dim, denv))
#const_v <- do.call(kron, const_dims)
# slightly more efficent than the above:
const_v <- const(prod(dim_roi), denv)
bs_dims <- lapply(paste0("dim", 1:n_dims),
function(dim) bspline(dim, denv, df=6, constraint="none"))
bs_v <- do.call(kron, bs_dims)
intercept <- kron(const_v, const_subj)
bs_z <- kron(bs_v, const(n, denv, by=data$z))
bs_x <- kron(bs_v, const_subj, by=as.vector(x_cube$mets$x))
# constant intercept, z_i*beta_z(v), x_i(v)*beta_x(v)
(pred <- concat(intercept, bs_z, bs_x))
resp <- as.vector(y_cube$mets$y)
system.time(m <- nplarge_lm_fit(pred, resp))
if(Sys.info()["user"] == "fabians"){
nplargehome <- "/home/fabians/wrkspc/tikhonov/trunk/pkg"
setwd(nplargehome)
library(devtools)
load_all("nplarge-db")
load_all("nplarge-la")
source("../sandbox/penalized/nplarge-regression-utils.R")
} else {
library("nplargedb")
library("nplargela")
source("nplarge-regression-utils.R")
}
library("nplargedb")
library("nplargela")
colors()
my.colors <- sample(2:length(colors()), 94, repalce = FALSE)
my.colors <- sample(2:length(colors()), 94, replace = FALSE)
my.colors
my.colors <- colors()[sample(2:length(colors()), 94, repalce = FALSE)]
my.colors <- colors()[sample(2:length(colors()), 94, replace = FALSE)]
my.colors
my.colors <- apply(as.matrix(my.colors), 1, function(x) rep(x, prod(dim_roi)))
my.colors
prd(dim_roi)
prod(dim_roi)
dim(my.colors)
head(c(my.colors))
?const
showClass(modelterm)
?modelterm
?do.call
?kron
data <- nplargedb::dataenv(list(r=1:10, s=1:10, t=1:10))
bs.r <- bspline("r", data, df=6)
bs.s <- bspline("s", data, df=5)
kron(bs.r, bs.s, bs.t)$show()
bs.t <- bspline("t", data, df=4)
kron(bs.r, bs.s, bs.t)$show()
?modelterm
bs_dims
?const
256/6
?bspline
?modelterm
?make_diffpen
?diff
diff(1)
p <- 10
p <- 1
D <- Diagonal(p)
diff <- 1
for(d in 1:diff) D <- diff(D)
P <- crossprod(D%*%t(term$C))
